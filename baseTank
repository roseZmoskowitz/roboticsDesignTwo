#pragma config(Sensor, in1,    Mpo,            sensorPotentiometer)
#pragma config(Motor,  port2,           Mogo1,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           Lb1,           tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port4,           Lb2,           tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port5,           liftmo1,       tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port6,           Rb1,           tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           Rb2,           tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           Mogo2,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           liftmo2,       tmotorVex393HighSpeed_MC29, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	//While(1==1)
	//AutonomousCodePlaceholderForTesting();
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
/*task lift()
{
	while(1==1)
	{
		if(vexRT(Btn5U)==1)
		{
			startMotor(liftmo1,127);
			startMotor(liftmo2,127);
		}
		if(vexRT(Btn6D)==1)
		{
			startMotor(liftmo1, -127);
			startMotor(liftmo2, -127);
		}
		else
		{
			stopMotor(liftmo1);
			stopMotor(liftmo2);
		}

	}*/
	task Mgoal()
	{
		while(1==1)
		{
			if(vexRT(Btn5U)==1)
			{
				startMotor(Mogo1, 127);
				startMotor(Mogo2, -127);
			}
			else if (vexRT(Btn5D)==1)
			{
				startMotor(Mogo1, -127);
				startMotor(Mogo2,  127);
			}
			else
			{
				stopMotor(Mogo1);
				stopMotor(Mogo2);
			}
		}
	}
	/*task(claw)
	{
	//claw open
	//claw close
	}*/
	/*task Mgoalpo()
	{
		while(1==1)
		{
			if(vexRT(Btn5U)==1 && SensorValue(Mpo)>=5)
			{
				motor(Mogo1)=127;
				motor(Mogo2)=127;
			}
			else if (vexRT(Btn5D)==1&& SensorValue(mpo)<=500)
			{
				motor(Mogo1)=-127;
				motor(Mogo2)=-127;
			}
			else
			{
				stopMotor(Mogo1);
				stopMotor(Mogo2);
			}
		}
	}*/
	task base ()
	{
		while (true)
		{
			int joystickL=0, joystickR=0, Tol=20;			//declare variables
			//tolerance  bv, if analog stick is unalligned and slightly above zero motor wont run unless past the tolerance value
			while(true)
			{

				if (abs(vexRT[Ch3])>Tol)				// ensure that the analog stick is past the tolerence point
					joystickL= vexRT[Ch3];
				else
					joystickL=0;
				if(abs(vexRT[Ch2])>Tol)		// ensure that the analog stick is past the tolerence point
					joystickR= vexRT[Ch2];
				else											//to ensure that when the analog stick is not being used the motor do not run
					joystickR=0;

				motor[Rb1] = -joystickR;
				motor[Rb2]=-joystickR;
				motor[Lb1]=joystickL;
				motor[Lb2]=joystickL;
			}
		}
	}
	task usercontrol()
	{
		startTask(Mgoal);
		startTask(base);

		UserControlCodePlaceholderForTesting();
	}
	//}
